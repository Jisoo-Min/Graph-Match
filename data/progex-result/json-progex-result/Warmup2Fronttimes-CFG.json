{
  "directed": true,
  "multigraph": true,
  "label": "CFG of Warmup2Fronttimes.java",
  "type": "Control Flow Graph (CFG)",
  "file": "Warmup2Fronttimes.java",
  "package": "",

  "nodes": [
    {
      "id": 0,
      "line": 6,
      "label": "String frontTimes(String str, int n)"
    },
    {
      "id": 1,
      "line": 7,
      "label": "char[] result"
    },
    {
      "id": 2,
      "line": 8,
      "label": "String front"
    },
    {
      "id": 3,
      "line": 10,
      "label": "if (str.length() < 3)"
    },
    {
      "id": 4,
      "line": 11,
      "label": "front = str"
    },
    {
      "id": 5,
      "line": 0,
      "label": "endif"
    },
    {
      "id": 6,
      "line": 13,
      "label": "front = str.substring(0, 3)"
    },
    {
      "id": 7,
      "line": 15,
      "label": "result = new char[n * front.length()]"
    },
    {
      "id": 8,
      "line": 17,
      "label": "int index = 0"
    },
    {
      "id": 9,
      "line": 18,
      "label": "int i = 0"
    },
    {
      "id": 10,
      "line": 18,
      "label": "for (i < n)"
    },
    {
      "id": 11,
      "line": 18,
      "label": "i++"
    },
    {
      "id": 12,
      "line": 0,
      "label": "endfor"
    },
    {
      "id": 13,
      "line": 19,
      "label": "int j = 0"
    },
    {
      "id": 14,
      "line": 19,
      "label": "for (j < front.length())"
    },
    {
      "id": 15,
      "line": 19,
      "label": "j++"
    },
    {
      "id": 16,
      "line": 0,
      "label": "endfor"
    },
    {
      "id": 17,
      "line": 20,
      "label": "result[index] = front.charAt(j)"
    },
    {
      "id": 18,
      "line": 21,
      "label": "index++"
    },
    {
      "id": 19,
      "line": 25,
      "label": "return new String(result);"
    }
  ],

  "edges": [
    {
      "id": 0,
      "source": 0,
      "target": 1,
      "label": ""
    },
    {
      "id": 1,
      "source": 1,
      "target": 2,
      "label": ""
    },
    {
      "id": 2,
      "source": 2,
      "target": 3,
      "label": ""
    },
    {
      "id": 3,
      "source": 3,
      "target": 4,
      "label": "True"
    },
    {
      "id": 4,
      "source": 4,
      "target": 5,
      "label": ""
    },
    {
      "id": 5,
      "source": 3,
      "target": 6,
      "label": "False"
    },
    {
      "id": 6,
      "source": 6,
      "target": 5,
      "label": ""
    },
    {
      "id": 7,
      "source": 5,
      "target": 7,
      "label": ""
    },
    {
      "id": 8,
      "source": 7,
      "target": 8,
      "label": ""
    },
    {
      "id": 9,
      "source": 8,
      "target": 9,
      "label": ""
    },
    {
      "id": 10,
      "source": 9,
      "target": 10,
      "label": ""
    },
    {
      "id": 11,
      "source": 10,
      "target": 12,
      "label": "False"
    },
    {
      "id": 12,
      "source": 10,
      "target": 13,
      "label": "True"
    },
    {
      "id": 13,
      "source": 13,
      "target": 14,
      "label": ""
    },
    {
      "id": 14,
      "source": 14,
      "target": 16,
      "label": "False"
    },
    {
      "id": 15,
      "source": 14,
      "target": 17,
      "label": "True"
    },
    {
      "id": 16,
      "source": 17,
      "target": 18,
      "label": ""
    },
    {
      "id": 17,
      "source": 18,
      "target": 15,
      "label": ""
    },
    {
      "id": 18,
      "source": 15,
      "target": 14,
      "label": ""
    },
    {
      "id": 19,
      "source": 16,
      "target": 11,
      "label": ""
    },
    {
      "id": 20,
      "source": 11,
      "target": 10,
      "label": ""
    },
    {
      "id": 21,
      "source": 12,
      "target": 19,
      "label": ""
    }
  ]
}
