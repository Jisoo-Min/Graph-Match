digraph result_test { 
// graph-vertices
  a1  [label="5-6:  boolean twoTwo(int[] nums)	if (nums.length == 1 && nums[0] == 2)"]; 
  2  [label="7:  return false;"]; 
  a2  [label="0-9:  endif	if (nums.length >= 2 && ((nums[0] == 2 && nums[1] != 2) || (nums[nums.length-1] == 2 && nums[nums.length-2] != 2)))"]; 
  5  [label="11:  return false;"]; 
  a3  [label="0-13:  endif	int i = 1"]; 
  8  [label="13:  for (i <= nums.length - 2)"]; 
  a4  [label="0-18:  endfor	return true;"]; 
  11  [label="14:  if (nums[i] == 2 && nums[i-1] != 2 && nums[i+1] != 2)"]; 
  12  [label="15:  return false;"]; 
  a5  [label="0-13:  endif	i++"]; 
// graph-edges
  a1 -> 2  [label="True"]; 
  a1 -> a2  [label="False"]; 
  a2 -> 5  [label="True"]; 
  a2 -> a3  [label="False"]; 
  a3 -> 8;
  8 -> a4  [label="False"]; 
  8 -> 11  [label="True"]; 
  11 -> 12  [label="True"]; 
  11 -> a5  [label="False"]; 
  a5 -> 8;
}